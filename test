import warnings
from pathlib import Path
from typing import Optional, Tuple

import pandas as pd
from openpyxl import load_workbook, Workbook
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.utils.cell import coordinate_to_tuple
from openpyxl.styles import Alignment, Font, PatternFill, Side, Border
from openpyxl.chart import BarChart, Reference

# Ignore warnings
warnings.filterwarnings("ignore", category=UserWarning)


class DataAnalyzer:
    """Performs data analysis and transformations on the DataFrame."""

    def __init__(self, output_dir: Path, filename: str):
        self.output_dir = output_dir
        self.filename = filename
        self.df = self.load_excel()

    def load_excel(self) -> pd.DataFrame:
        """Load the Excel file and perform initial transformations."""
        df = pd.read_excel(self.output_dir / self.filename, sheet_name="Sheet1")
        df["Tran Code"] = df["Tran Code"].fillna("NA")
        return df

    def calculate_max_times(self) -> None:
        """Calculate and print maximum processing times."""
        max_dna_vs_shadowcore_entry_time = pd.to_datetime(self.df['DNA vs ShadowCoreEntryTime'], errors='coerce').max()
        print(f"Maximum DNA vs ShadowCore Entry Time - "
              f"{max_dna_vs_shadowcore_entry_time.minute} mins {max_dna_vs_shadowcore_entry_time.second} secs")

        max_shadowcore_processing_time = pd.to_datetime(self.df['Shadowcore Processing Time'], errors='coerce').max()
        print(f"Maximum ShadowCore Processing Time - "
              f"{max_shadowcore_processing_time.minute} mins {max_shadowcore_processing_time.second} secs")

        max_total_dna_to_shadowcore_time = pd.to_datetime(self.df['Total DNA To ShadowCore Time'], errors='coerce').max()
        print(f"Maximum Total DNA To ShadowCore Time - "
              f"{max_total_dna_to_shadowcore_time.minute} mins {max_total_dna_to_shadowcore_time.second} secs")

    def generate_pivot_table(self) -> pd.DataFrame:
        """Generate a pivot table based on transaction data."""
        df_pivot = pd.pivot_table(
            self.df,
            values='DNA Reference Number',
            index=['Tran Code'],
            columns=['Delay in Minutes'],
            aggfunc='count',
            margins=True,
            margins_name='Grand Total'
        )
        return df_pivot


class ExcelStyler:
    """Handles Excel worksheet styling, formatting, and chart creation."""

    def __init__(self, workbook: Workbook, sheet_name: str):
        self.wb = workbook
        self.ws = self.wb[sheet_name]

    def apply_header_styles(self) -> None:
        """Apply styling to the worksheet header."""
        for cell in self.ws[2]:
            cell.font = Font(bold=True)
            cell.fill = PatternFill(start_color="0099CCFF", end_color="0099CCFF", fill_type="solid")

    def merge_cells_and_add_title(self) -> None:
        """Merge specific cells and apply a title."""
        self.ws.merge_cells(start_row=1, start_column=2, end_row=1, end_column=self.ws.max_column)
        merged_cell = self.ws.cell(row=1, column=2)
        merged_cell.value = "Delay in Minutes"
        merged_cell.font = Font(bold=True)
        merged_cell.alignment = Alignment(horizontal='center', vertical='center')
        merged_cell.fill = PatternFill(start_color="FFFF00", end_color="FFFF00", fill_type="solid")

    def set_cell_borders(self, side: Optional[Side] = None) -> None:
        """Set borders for all cells in the worksheet."""
        side = side or Side(border_style='thin', color='000000')
        for cell in self.ws._cells.values():
            cell.border = Border(top=side, bottom=side, left=side, right=side)

    def find_last_column_for_mins(self) -> int:
        """Find the last column that contains 'mins'."""
        for row in self.ws.iter_rows():
            for cell in row:
                if isinstance(cell.value, str) and "mins" in cell.value and "%age" not in cell.value:
                    return coordinate_to_tuple(cell.coordinate)[1]
        return 0

    def find_last_column_for_not_found(self) -> Optional[int]:
        """Find the last column for 'Not Found' or 'CLS/Appr Status, Not Streamed'."""
        for row in self.ws.iter_rows():
            for cell in row:
                if isinstance(cell.value, str) and "CLS/ Appr Status, Not Streamed" in cell.value:
                    return coordinate_to_tuple(cell.coordinate)[1]
        return None

    def fill_cells_based_on_value(self, start_row: int, end_row: int, start_column: int, end_column: int) -> None:
        """Fill cells with red color based on value > 0."""
        for row in range(start_row, end_row + 1):
            for col in range(start_column, end_column + 1):
                cell = self.ws.cell(row=row, column=col)
                if cell.value > 0:
                    cell.fill = PatternFill(start_color="00FF0000", end_color="00FF0000", fill_type="solid")


class BarChartCreator:
    """Creates a bar chart for the Excel sheet."""

    def __init__(self, workbook: Workbook, ws_barchart_name: str):
        self.ws_barchart = workbook.create_sheet(ws_barchart_name)
        self.chart = BarChart()

    def create_barchart(self, data: list) -> None:
        """Add bar chart to the new worksheet."""
        for row in data:
            self.ws_barchart.append(row)

        self.chart.title = "Notifi Report"
        self.chart.x_axis.title = "Delay in Minutes"
        self.chart.y_axis.title = "No. Of Records"

        values = Reference(self.ws_barchart, min_col=2, min_row=1, max_col=2, max_row=len(data))
        categories = Reference(self.ws_barchart, min_col=1, min_row=2, max_row=len(data))

        self.chart.add_data(values, titles_from_data=True)
        self.chart.set_categories(categories)
        self.chart.legend = None
        self.chart.height = 11
        self.chart.width = 30
        self.ws_barchart.add_chart(self.chart, "A1")


def main(output_dir: Path, final_output_filename: str) -> None:
    """Main function to run the complete process."""
    
    # Data analysis
    analyzer = DataAnalyzer(output_dir, final_output_filename)
    analyzer.calculate_max_times()
    
    df_pivot = analyzer.generate_pivot_table()

    # Load Excel workbook
    wb = load_workbook(output_dir / final_output_filename)
    ws_name = "Report Table"
    wb.create_sheet(ws_name)
    
    # Populate pivot table into the new worksheet
    ws = wb[ws_name]
    for r_idx, row in enumerate(dataframe_to_rows(df_pivot, index=True, header=True)):
        for c_idx, value in enumerate(row):
            ws.cell(row=r_idx + (2 if r_idx == 0 else 1), column=c_idx + 1, value=value)

    # Style Excel workbook
    styler = ExcelStyler(wb, ws_name)
    styler.apply_header_styles()
    styler.merge_cells_and_add_title()
    styler.set_cell_borders()

    # Bar chart creation
    chart_data = [
        ("Delay in Minutes", "No. of Records"),  # Example header row
        # Populate your data accordingly here
    ]
    barchart_creator = BarChartCreator(wb, "Bar Chart")
    barchart_creator.create_barchart(chart_data)

    # Save the workbook
    wb.save(output_dir / final_output_filename)


if __name__ == "__main__":
    output_directory = Path("Output")
    final_output_file = f"ProdNOTIFIReport_{date.today().strftime('%m%d%Y')}.xlsx"
    main(output_directory, final_output_file)

